plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'org.sonarqube' version '3.4.0.2513'
    id 'jacoco'
}

group = 'nl.fontys.s3'
version = '0.2.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.8'
//    implementation 'mysql:mysql-connector-java:8.0.30'
    implementation 'org.flywaydb:flyway-core:9.8.3'
    implementation 'org.flywaydb:flyway-mysql:9.8.3'


    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.5'
    testImplementation 'org.springframework.security:spring-security-test'
//    testImplementation 'com.playtika.testcontainers:embedded-mysql:2.2.12'
    testImplementation 'com.playtika.testcontainers:embedded-mariadb:2.2.12'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

sonarqube {
    properties {
        property "sonar.projectKey", "I488027_s3-roomies-backend_AYSqQC-gyjvjNUpzEnhF"
        property "sonar.qualitygate.wait", true
        property "sonar.coverage.exclusions", "**/core/configuration/**"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/configuration/*"])
        }))
    }
}

project.tasks["sonarqube"].dependsOn "jacocoTestReport"


